


这是一个系列文章，目前包含：

《支付山河图》卷零——总论
《支付山河图》卷二——退款篇
《支付山河图》 卷三——结算篇【当前文章】
\a 推荐优先阅读卷零——总论，对系统全貌有大致了解后再阅读其他卷，其他卷无严格先后顺序。
第1章 序言
1.1 背景
1.2 专业名词
1.3 温馨提示
第2章 结算业务概述
2.1 结算概念
2.2 结算场景
2.3 结算资金流
2.4 结算流程
2.4.1 合同签署
2.4.2 商户交易
2.4.3 资金结算
第3章 结算系统
3.1 系统架构
3.2 合同模型
3.2.1 初始模型
3.2.2 优化模型
3.3 控制模型
3.4 适配层
3.5 Q&A
3.5.1 数据源安全问题
3.5.2 数据源延迟问题
3.6 计费层
3.6.1 计费概念
3.6.2 计费模型
3.6.3 计费实现
3.6.4 Q&A
3.6.4.1 数据库记录签名
3.6.4.2 金额计算问题
3.6.4.3 先除后乘还是先乘后除？
3.6.4.4 手续费为什么不在支付的过程中收取？
3.7 转账层
3.7.1 功能概述
3.7.2 转账实现
3.7.3 Q&A
3.7.3.1 手续费为什么不直接从商户B划转到收益B？
3.7.3.2 结算款和手续费转账的隐性依赖关系
3.7.3.3 为什么禁止商户支配交易账户的资金？
3.8 提现层
3.8.1 功能概述
3.8.2 提现实现
第4章 结算安全
4.1 防重
4.2 防漏
4.3 防错
4.4 容灾
第5章 结束语
第6章 参考
第1章 序言
1.1 背景
结算是什么？结算有哪些典型场景？结算资金流是怎样的？一个完整的结算系统结构是怎样的？如何确保结算安全？结算过程中需要注意哪些问题？我会在本文中向你分享我理解的答案。

1.2 专业名词
专业名词	名词解释
商户B	商户交易（Business）账户的简称。该账户专门用于交易，其中资金商户无法自主支配。
商户C	商户现金（Cash）账户的简称。该账户资金商户可自由支配，如提现等。
收益B	存放支付机构收取交易手续费的交易账户。
直连商户	直接和支付机构签订结算合同并进行交易的商户。
代理商户	与支付机构签订返佣合同，发展子商户交易，并分取子商户佣金的商户。
转账	支付系统内部用户账户间资金的划转，是基础交易平台提供的基础能力之一。
提现	将系统账户余额转变为银行卡余额的过程，系统余额减，银行余额加。
B2C交易	Business To Customer。是企业为用户提供服务的线上交易模式。
B2C转账	Business To Cash，读作B To C。表示交易账户向现金账户的转账。
C2B转账	Cash To Business，读作C To B转账。表示现金账户向交易账户转账。
1.3 温馨提示
《支付山河图 卷零——总论》中有对支付系统全貌的描述，推荐萌新同学优先阅读。
\a 全文共7000+字，并包含大量示意图，推荐分阶段阅读。

第2章 结算业务概述
2.1 结算概念
结算，即核算与了结，是对一个时期内商品交易、劳务供应等方面发生的经济收支往来进行核算和了结。——百度百科
\a 在支付系统中，结算的主要作用是清分用户与商户之间的交易，在按照合同约定的费率收取手续费后，将用户支付的资金从商户交易账户划转到商户现金账户并提现到银行卡。

2.2 结算场景
结算在业务上的场景也有很多，下面是一些典型的场景。

商户结算。通过商户在系统记账平台的交易凭证单来进行资金结转，是最常见的类型。
指令结算。按照业务方发出的结算指令来结转指定的金额，如生活缴费这种涉及到委托方的场景。
融合结算。大陆人到香港消费、港人到大陆消费这样的跨钱包之间交易资金的结算。
2.3 结算资金流
资金流永远是一个支付系统最本质的东西，结算的根本目的就是将商户的交易资金结转到指定的账户（现金账户或银行账户）并收取交易手续费。
\a 我们以一种最常见的结算场景：直连商户要求结算到银行卡的场景为例，其资金流如下图所示：



由于商户要求自动提现到银行卡，因此既有系统资金流，又有物理资金流。过程描述如下：
\a 1、 商户交易资金划转。将商户收取的100元交易资金从商户B账户划转到商户C账户。
\a 2、 系统手续费收取。从商户的100元交易资金中，收取手续费1元，转到专用的结算收益B账户中。手续费收取比例在与商户签订结算合同时约定，如%1。
\a 3、 结算资金提现。将商户C中的99元扣除，然后从备付金银行账户向商户银行卡转账99，完成自动提现。

小问题：为什么不直接从商户B划转手续费到收益B，而要经过商户C呢？分析见3.7.3Q&A 。

2.4 结算流程
从全局的角度来看，在结算前后有一些比较重要的过程。下面将一一介绍：

2.4.1 合同签署
商户在接入支付机构时，会签订一系列合同，其中一种重要的合同就是结算合同。
\a  

结算合同约定了支付机构为商户结算的频率——结算周期、手续费收取比例——费率、最低结算金额——起结点等重要信息，这些信息直接决定了商户什么时候能收到、收到多少交易资金。只有拥有结算合同的商户，才能参与结算！
\a 合同模型在3.2节中介绍。

2.4.2 商户交易
结算是针对交易的结算，即必须要有交易才会有结算。
\a  
\a 用户向商户支付，会在记账平台留下记账凭证，结算则依据该记账凭证进行商户资金的结算。
\a 以用户A向商户B支付100元为例，记账平台的操作如下所示：
\a  
\a 从用户A账户划转100元到商户B账户，并在记账凭证单中记录“A向B支付100元”。

PS：核心记账平台和基础交易平台在《支付山河图 卷零——总论》中3.5节介绍，推荐优先阅读。

2.4.3 资金结算
有了结算合同和交易，结算就可以进行了。接上节的支付例子，结算交互图如下：
\a  
\a 整体过程描述如下：
\a 1、 结算系统从记账平台拉取用户的支付凭证：“A向B支付100元”。
\a 2、 调用基础交易平台的转账服务进行 “商户交易资金划转”：商户B向商户C转账100元。
\a 3、 调用基础交易平台的转账服务进行“系统手续费收取”：商户C向收益B转账1元。
\a 4、 结算系统调用提现服务，将商户交易资金提现到商户银行卡：商户C扣除99，备付金银行账户向商户银行卡转账99.

当商户银行卡资金到账时，结算过程结束。

第3章 结算系统
3.1 系统架构
一种扩展性较强的通用批量结算系统的整体架构如下所示：
\a  
\a 从左到右依次是适配层、计费层、转账层和提现层。

适配层是系统入口，负责业务接入和差异屏蔽；
计费层负责计算手续费，并汇总交易；
转账层负责结算资金的划转，包括商户资金和手续费收益的划转；
提现层负责将商户的结算资金提现到指定银行卡。
\a 各层的详细过程和实现方式下文介绍。
3.2 合同模型
合同是结算过程中最重要的依据！结算合同决定了商户什么时候能收到资金、支付机构收取商户多少手续费、是否自动提现到商户的银行卡等等。

3.2.1 初始模型
一种简单的合同模型是将所有字段都放在一个表中，如下图所示：
\a  
\a 这种方式组织和使用起来比较简单，但也存在一些局限性。对于一些特定的场景，例如在一些节假日，为了促销，支付结构往往会给出一个更加优惠的费率来激励商户使用微信支付，这种优惠费率只会持续特定的几天，假日结束后就需要恢复正常费率。
\a 在上面的合同组织方式上，想要达到这样的效果，只能将原来的一条合同，拆分为3份日期连续的合同，如下图所示：
\a  
\a 这样的方式存在一些问题：
\a 1、安全问题：这种方式需要截断原有的合同再进行拼接，逻辑复杂，存在较大的出错可能，每一次修改都是一次冒险。
\a 2、管理问题：每一次修改，合同数都会从1条增加到3条，随着时间的流逝，合同会变得越来越多，时间片段会变得越来越碎，增大了管理的难度。

3.2.2 优化模型
另一种更加灵活的组织方式是：计费、打款合同拆分，其示意图如下：
\a  
\a 其具体措施如下：
\a 1、 不变的信息，如商户号、起结点等，放到基本信息合同中。一条基本合同对应多条计费合同、打款合同。
\a 2、 计费合同：记录费率、渠道等信息，结算系统使用该合同来结算手续费。
\a 3、 打款合同：记录打款周期等信息，系统根据该合同来决定金额基类到多少、满足多长的周期再进行转账打款。

由于同时存在多条计费、打款合同，因而这些合同以优先级的方式取用：
\a  
\a 在这样的模式下，当节假日来临时，只需要插入一条新合同，并将其设置为较高的优先级即可，不需要拆分、修改原有的合同，合同数量也不会急速增长。
\a 同时，对于同一商户，不同渠道的费率不同这样的场景也能灵活支持。

3.3 控制模型
结算系统中的所有模块都由同一个任务表控制，我们称之为任务总控。如下图所示：
\a  
\a 系统中的所有程序，从适配层到提现层，都由统一的全局任务表来进行控制。
\a 为什么要进行任务总控呢？
\a 任务总控的作用有很多，最主要的作用就是对系统可重入的支持。例如程序开始时，我们仅从任务表中加载“初始态”和“执行失败”的任务来执行，这样已经执行成功的任务不会被再次执行，达到了程序可重入的能力。同时失败的任务会被再次加载执行，具备了任务失败自动重试的能力。
\a 除此之外，统一的任务模型还可以让我们快速确认任务的当前状态，快速排查问题，简化监控告警机制和便捷制定结算情况报表等。

3.4 适配层
适配层是结算系统的入口，该层由多个平行渠道构成。如下图所示：
\a  
\a 每个渠道代表了一种业务，它们的形式各不相同。有的通过DB交付数据，有的通过文件交付数据，而有的直接给予结算指令。
\a 适配层的作用就是屏蔽这些业务差异，将数据整合成统一的模型，填充到交易明细表，交付给后续过程处理。
\a 适配层的程序数量并不固定，取决于业务给出的原始数据形式。以文件交互的典型场景为例，通常包含文件获取程序和文件解析程序，交互图如下所示：
\a  
\a 文件同步程序负责从业务服务器上将文件拉取回结算服务器，通常可以使用rsync或者FTP文件服务，也可以使用公司HDFS文件集群。
\a 文件解析程序负责理解业务文件规则，并将文件数据解析整理为统一的交易明细记录，插入交易明细表中，供后续计费程序使用。

3.5 Q&A
3.5.1 数据源安全问题
由于数据源是结算的依据，如果数据源错误，则最终的结算结果一定会错误，并导致资金安全问题！因此我们需要特别注意数据源安全问题。
\a 对于文件交互类的渠道，要特别注意交易文件是否损坏、是否被篡改等。可行的方案是接入秘钥系统，使用系统的签名算法对文件的hash值进行签名，这样既可以确保文件的真实完整性，又可以防止篡改和抵赖。
\a 而对于DB类的数据源，则要特别注意数据同步是否有遗漏，金额类数据是否有差错。可行的方案是进行独立的数据源核对，检验数据源头和结算侧快照的总笔数和总金额是否一致，不一致则对比明细，定位差异内容。

3.5.2 数据源延迟问题
在日常业务中，数据源延迟是大概率会出现的问题。一旦出现延迟，就要求我们的适配层具有重入的能力。可行的方案是接入任务总控模型（3.3节），使得程序具有失败重入的能力。

3.6 计费层
3.6.1 计费概念
计费，即计算商户交易手续费。计费的依据是商户与支付机构签署的计费合同，计费的数据源是交易明细表。计费在整体架构中所处位置如下图：


\a 计费只负责按照计费合同计算应收手续费金额，实际的资金划转在转账阶段进行。

3.6.2 计费模型
计费模型多种多样，取决于业务的发展，会存在多种计费模式并存的情况。我们以一个商户张三有4笔交易需要结算为例，在不同的计费模型下，手续费计算结果如下图：
\a  
\a 上述3种常见计费模型说明如下：

比例计费：即按照结算资金的百分比计费，如100元资金，%1费率，则手续费为1元。
单笔计费：即按照交易笔数来进行计费，如约定每笔交易收取1元的手续费，则3笔支付收取3元，1笔退款收取-1元（假设退款退手续费），则总共3-1=2元。
阶梯计费：根据交易金额大小范围动态确定费率。如0-1000元，费率为0；1000-10000元，费率为0.5%；10000-1000000，费率为1%。100元处于第一个区间，费率为0，收取0元。这种方式对小微商户免收手续费，有利于扩展商户量。
PS:上例为了便于说明，是对汇总金额进行手续费计算。实际业务中，是对单笔交易进行计算，计算结果再进行汇总。

3.6.3 计费实现
计费逻辑交互图如下：
\a  
\a 下面对其中重要过程的实现和原因进行说明：

加载交易明细。从交易明细表中加载适配层产生的交易数据。假设张三、李四各有两笔交易，金额、交易订单号如图。
查单验证。调用基础交易平台的订单查询服务，验证交易明细中的订单号是否都存在，状态是否正常。这一步是本着模块间互不信任的原则，防止适配层伪造交易。
登记全局订单号。将交易明细中的订单号登记到一个全局的登记表中，这是为了防止重复结算。如果单号在登记表中已经存在，则说明该笔订单已经被结算过。
加载合同并计费。加载计费合同，根据计费类型和费率，计算每一笔交易的手续费。如张三是单笔计费，每笔收取1元手续费，则两笔交易收取2元手续费。
汇总计费结果。将交易明细表中已经计费的记录，按照商户号的维度汇总为一笔，为后续的转账和提现做准备。汇总后可以看到该商户本次结算的总金额和总手续费。（也可以按照任务号+商户号+币种等联合维度汇总，视业务需求而定）
3.6.4 Q&A
3.6.4.1 数据库记录签名
在系统安全方面，数据库防篡改是必须要考虑的问题。如果结算过程中的金额被篡改，则会直接导致资金安全问题。常见的防篡改方式是取记录的关键字段并进行签名，获取数据时进行验签，验证通过则认为数据没有被篡改。
\a 由于结算是系统内部交互，不涉及抵赖问题，因此可以适当简化，可考虑使用加盐摘要算法，如加盐MD5。

3.6.4.2 金额计算问题
在支付系统中，金额类数据通常都是以币种的最小单位来存储，不计小数。因此数据库中存储金额的数据类型通常都是bigint，如人民币100.5元在数据库中记为10050，单位为分。
\a 我们已经知道，在结算过程中会计算手续费，而数据库中又不存储小数，那如果以币种最小单位计算仍然出现小数该怎么办呢？答案是四舍五入。如100.4分记为100分，100.5分记为101分。由四舍五入带来的损益是无法避免的，但由于是以币种最小单位进行四舍五入，因此影响可以忽略不计。

3.6.4.3 先除后乘还是先乘后除？
在百分比计费的场景中，费率是一个分数，既有分子，又有分母，如千分之30的费率表现为30/1000。现在假设有10000的交易金额需要计费，那么我们是先用10000*30再除以1000呢，还是先用10000/1000再乘30？
\a 从数学的角度看，这两种方式的计算结果是一样的。但在计算机中，数字存储是有大小限制的，如果超过了这种数据类型的最大值，就会导致溢出，数字就会错误。而在上面的场景中，如果需要结算的金额非常大，那么先乘以30就很可能会溢出，得出错误的结果。所以，在计算手续费时，应当先除以分母，再乘分子，这样可以避免数字溢出。

3.6.4.4 手续费为什么不在支付的过程中收取？
可以从多个方面来看这个问题。
\a 从时效性方面看，支付对时效性的要求非常高，流程要尽量精简。
\a 从交互角度来看，手续费收取是支付机构和商户之间的事，而支付是用户和商户之间的事，不能因为手续费收取异常而影响用户支付的可用性。
\a 如果是收取用户的手续费，例如信用卡业务中成本过高，需要收取用户手续费，那么就可以在支付过程的实时链路中收取（的确有这种场景）。

3.7 转账层
3.7.1 功能概述
转账，就是进行商户资金的划转和手续费的收取。我们的系统资金流就是在这一层中完成的，主要操作如下图所示：
\a  
\a 在整体架构中，转账层所处位置如下图：
\a  

3.7.2 转账实现
转账模块交互图如下所示：
\a  
\a 重要过程解释如下：

加载计费汇总记录。从计费汇总表中加载计费完成的汇总记录。
加载转账合同。从合同表中加载商户的转账合同表，其中包含商户的结算周期、起结点等信息。
生成转账记录。根据转账合同和计费汇总记录，生成转账记录。转账记录中包含需要转账的金额以及进行转账的账号，账号通过基础交易平台提供的服务中查出。
结算资金转账。调用基础交易平台的B2C转账服务，将结算资金50￥从商户B账户转到商户C账户。
手续费转账。调用基础交易平台的C2B转账服务，将手续费2￥从商户C账户转到收益B账户。
3.7.3 Q&A
3.7.3.1 手续费为什么不直接从商户B划转到收益B？
我们从上面的资金流中看到，资金是先由商户B到商户C，再从商户C转手续费到收益B，那么为什么不直接从商户B转手续费到收益B呢？
\a 原因是多方面的，个人理解的原因有以下几点：

财务及商户的要求。商户会关注C账户流水，并期望在流水中感知手续费支出；财务同事也会有相关资金安全规则的限制。
商户B中的资金可能会在结算前被退款先占用。因为退款是常规业务，因此直接从商户B出手续费失败的风险更高，容易造成交易资金和手续费不能同时收取的尴尬局面。而从商户C转出手续费的方式，因为交易资金已经成功进入商户C，不存在退款占用，手续费收取成功率更高。
3.7.3.2 结算款和手续费转账的隐性依赖关系
手续费为什么要经过商户C，而不直接从商户B到收益B？这是为了让商户能在C账户流水中看到手续费支出，便于商户自身对账。

3.7.3.3 为什么禁止商户支配交易账户的资金？
在专业名词章节介绍交易账户时我们提到，商户无法支配交易账户中的资金，那么为什么要这样限制呢？让我们来看看如果允许商户支配B账户资金会怎样：
\a 用户支付100W到商户交易账户，商户立马将资金从交易账户转走并提现，然后跑路。
\a 支付机构？？？我手续费都还没收呢，你就把钱转走了？那我吃啥？
\a 所以禁止商户支配B账户资金是出于安全考虑，确保支付机构能收到手续费。当然也是为了清晰账户边界，交易账户的资金仅用于交易（支付、退款）。

3.8 提现层
3.8.1 功能概述
提现层的主要作用是为商户代为发起自动提现，将商户现金账户中的结算资金提现到指定银行卡中。对应于资金流中的物理资金流：
\a  
\a 银行卡信息在商户签署合同时给出，可以记在基本信息中，也可以记在提现合同中。
\a 在整体架构中，提现层所处位置如下图：
\a  

3.8.2 提现实现
提现模块功能较为简单，其交互图如下所示：
\a  
\a 主要过程描述如下：

从转账表中加载待提现的记录。
从合同表中加载出提现信息，如商户银行账户等。
调用基础交易平台的“提现单号生成服务”，生成提现单号并写回转账表（预下单）
调用基础交易平台的提现服务，为商户发起提现。
\a 结算中的提现模块内容实际上到此为止了，但为了贯通说明整个链路，我们将对商户提现服务及其之后的内容也进行了简要描述。
商户提现服务首先冻结待提现资金48￥。
商户提现服务将提现记录写入基础单据——提现单表中。
付款系统定时加载提现记录，并进行打包合并。
付款系统将提现请求发往银行，进行物理资金操作。具体为：从微信备付金账户划转48￥到商户的银行卡。
银行处理成功后，扣除商户C中冻结的48￥资金，提现结束。
在卷零中我们提到，结算会依赖于付款的基础能力，就是指这里依赖付款系统去银行进行物理资金操作的能力。

第4章 结算安全
在金融相关业务中，安全是重中之重。而常见的安全点又集中在如何防重、防漏、防错和容灾上。

4.1 防重
防重，即防止重复结算。如果一笔订单被系统重复结算，则会导致短款问题，降低商户对支付机构的信任。
\a 可行的方案是建立全局登记表，记录每一笔已经结算的订单号，在受理新的交易时将单号进行登记，并判断是否重复。这样就可以防止同一笔订单重复结算。

4.2 防漏
防漏，即防止订单遗漏。如果出现订单被结算系统遗漏，则商户会发现结算资金比实际交易少，会认为支付机构侵吞了资金，引起投诉。
\a 对于DB数据采集类的结算，可以通过数据源核对来防止漏单。对于账单交付类的结算，则由账单提供方保证没有遗漏。

4.3 防错
防错，即防止数据错误。如果发生数据错误，导致结算资金变更或结算失败，就会引起资金问题或结算延迟。
\a 可行的方案是，通过数据库记录签名来确保数据不会被篡改。同时，建立费率等敏感信息的波动阈值监控来发现费率偏差严重的数据错误。

4.4 容灾
结算系统属于定时的批跑程序，可通过主备机并跑来实现跨机房容灾。即使主机挂掉，备机也会兜底执行。也可以接入Job平台，由Job来进行故障判断和备机拉起。

很多安全措施都是融合在细节之中的，实际上大多数安全问题也是由于细节疏忽造成的。上面只是简单罗列了一些抛砖引玉的做法，内容并不全面，如果你有更好的方法，欢迎评论指点哦~

第5章 结束语
本文中我们首先从概念、场景和资金流方面对结算进行了概述，并对结算前后的重要流程进行了全链路的介绍，让读者对结算有一个整体的了解。随后描绘一种通用性较强的结算系统架构，并对架构中的各个部分进行了实现说明，如合同模型的演变、典型计费模式的列举说明、转账先后顺序的思考等，各个章节的Q&A部分也提出了一些有趣的问题并给出了个人理解。在文章最后我们跳出具体逻辑，对结算安全进行了思考，简要地提出了一些重要的结算安全问题并给出了一些可行的解决方案。
\a 结算还有更复杂的业务场景，例如代理商模式、融合结算模式、指令结算模式等等。不过本质上都是交易资金划转+手续费收取，所以非相关岗位的同学理解本文中的典型结构就足够了。

第6章 参考
境外通用结算体系——yonghualiu、nigelzhou
香港本地结算体系——yonghualiu、nigelzhou
境外基础交易平台——erickenwu、damianyang