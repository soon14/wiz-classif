


这是一个系列文章，目前包含：

《支付山河图》卷零——总论
《支付山河图》卷二——退款篇【当前文章】
《支付山河图》卷三——结算篇
\a 推荐优先阅读卷零——总论，对系统全貌有大致了解后再阅读其他卷，其他卷无严格先后顺序。
第1章 序言
1.1 背景
1.2 专业名词
1.3 温馨提示
第2章 退款业务概述
2.1 退款概念
2.2 退款场景
2.3 退款资金流
2.3.1 退余额
2.3.2 退卡
2.4 山河图全景
2.4.1 全局视角
2.4.2 退款实时链路
2.4.3 退款异步链路
第3章 退款实时链路
3.1 架构概述
3.2 Q&A
3.2.1 为什么要锁单？
3.2.2 分布式事务中断问题
3.2.3 共享内存的改进方式
3.2.4 为什么要引入消息组件CQ？
3.3 更深入的细节
第4章 退款异步链路
4.1 功能概述
4.1.1 与银行交互
4.1.2 与人交互
4.1.3 退款降级
4.2 架构概述
4.3 数据同步
4.3.1 功能说明
4.3.2 实现逻辑（交互图）
4.3.3 Q&A
4.3.3.1 拉取退款单的时间范围
4.3.3.2 当某一个表同步失败时，如何处理？
4.3.3.3 如何防漏？
4.3.3.4 如何防重？
4.4 退款受理
4.4.1 功能说明
4.4.2 实现逻辑（交互图）
4.5 退款总控
4.5.1 功能说明
4.5.2 实现逻辑
4.5.3 Q&A
4.5.3.1 退款总控的意义是什么？
4.5.3.2 防重问题
4.6 总控调度
4.6.1 功能说明
4.6.2 接口调度
4.6.2.1 功能说明（交互图）
4.6.3 余额调度
4.6.3.1 功能说明
4.6.4 Q&A
4.6.4.1 接口调度中的提现
4.6.4.2 调度的依据是什么？
4.6.4.3 为什么需要调度分发？
4.6.4.4 渠道“转账退款”的数据来源是什么？
4.7 退款渠道
4.7.1 概述
4.7.2 接口退款
4.7.2.1 什么是接口退款？
4.7.2.2 为什么需要接口退款？
4.7.2.3 什么时候进行接口退款？
4.7.2.4 怎么进行接口退款？
4.7.3 转账退款
4.7.3.1 什么是转账退款？
4.7.3.2 为什么需要转账退款？
4.7.3.3 什么时候进行转账退款？
4.7.3.4 怎么进行转账退款？
4.8 渠道调度
4.8.1 概述
4.8.2 功能说明（交互图）
4.9 结果回导
4.9.2 核心回导
4.9.2.1 功能概述（交互图）
4.10 平台C对账
4.10.1 功能概述（交互图）
4.10.2 Q&A
4.10.2.1 对账方式是什么？
4.11 异常中心
4.11.1 功能概述
4.11.2 目的
4.11.3 实现逻辑
第5章 退款要点
5.1 退款安全
5.2 链路界限
第6章 结束语
第1章 序言
1.1 背景
什么是退款？退款有哪些典型场景？退款资金流是怎样的？如何退款？一个完整的退款系统架构是怎样的？各个部分是如何实现的？退款过程中有哪些需要注意的问题？我会在这篇文章中向你分享我找到的答案。

1.2 专业名词
专业名词	名词解释
退余额	指将款项退回用户的账户余额中。
退卡	指将款项退回用户指定的银行卡中。
原子服务	完成单一功能的最小服务单元。
集成服务	通过组合多种原子服务完成复杂功能的业务服务。
退款平台C账号	专门用于异步退款资金暂存的现金（Cash）账号，专款专用，便于清分。
系统资金流	支付机构内部账户间的资金流动情况。
物理资金流	支付机构外部，银行中的实际资金流动情况。
资金冻结	系统资金的一种特殊状态，被冻结的资金并没有被扣除，但用户无法使用。在风控和与银行交互时，通常会冻结资金。
资金解冻	解除被冻结资金的特殊状态，将其转变回可用余额。
B账户	B（Business）账户。商户用于与用户交易的特殊账户。用户支付的交易款会进入商户B账户，该账户资金经过结算后进入商户C账户。
C账户	C（Cash）账户。持有人可自由操作其中资金的账户类型。用户只拥有现金账户，商户既具有现金账户，也具有交易账户。
香港钱包	香港微信支付前端的内部称呼，大陆微信支付前端称为大陆钱包。
1.3 温馨提示
全文较长（1W+字），建议分阶段阅读。

第2章 退款业务概述
2.1 退款概念
退款，顾名思义就是退回支付的款项。在卷零中我们提到，支付就是将资金从用户现金账户（或银行卡）划转到商户的交易账户。而退款则相反，是将资金从商户交易账户退回到用户的现金账户（或银行卡）。最简单的余额退款如下图所示：
\a  

2.2 退款场景
退款在业务上的场景有很多，例如：
\a 1、 商户退款：用户向商户申请，商户向支付机构提交的退款请求，是最常见的类型。
\a 2、 红包退款：发出的红包没有被领完，退回发出账户。
\a 3、 对账退款：支付机构内部对账，产生的某些差异需要通过退款来平账。
\a 4、 其他退款。
\a 剥离业务看本质，我们可以将退款场景划分为有限的几种类型。不同的划分标准会得出不同的退款类型。
\a 如果我们以资金流向来划分，可以将退款分为两种：
\a 1、 退回余额。支付的金额退回用户的微信余额。
\a 2、 退回银行卡。 支付的金额退回用户的银行卡账户。
\a 从退款请求来源的角度划分，可以将退款划分为：
\a 1、 外部发起的退款。例如买家退货后，商户发起的退款。
\a 2、 内部发起的退款。例如内部对账过程中，核对出的差异需要通过退款来平账。

2.3 退款资金流
资金流永远是一个支付系统最本质的东西，所有的操作都是为了完成资金的安全流转，所以让我们先来看看退款都有哪些典型的资金流。
\a 退余额和退银行卡类型的退款，资金流是不一样的，详情如下。

2.3.1 退余额
退余额，顾名思义就是将款项退到用户的账户余额。由于不涉及外部系统，所以只有系统资金流：
\a  
\a 进行一笔B2C（Business To Custom，读作B To C）转账，将资金从商户B转到用户C账户，即完成了退余额操作。

2.3.2 退卡
退银行卡，即将用户支付的资金退回到用户的银行卡中。由于需要与银行交互，因此既有系统资金流，又有物理资金流。如下所示：
\a  
\a 资金退银行卡的大致流程如下：
\a 1、 基础交易平台将退款资金从商户B账户划转到退款专用的平台C账户。
\a 2、 将平台C中待退资金冻结，等待银行请求结果。
\a 3、 物理资金操作请求发往银行，进行银行账户资金的划转。
\a 4、 根据银行资金操作结果，成功则扣除平台C中冻结的资金，退款完成；失败则解冻资金，等待下次重入。
\a 上述步骤中，1、2、4属于系统资金流，3属于物理资金流。
\a （为什么不直接扣除平台C余额，而要先冻结呢？涉及小知识：冻结解冻与虚充虚提）

2.4 山河图全景
2.4.1 全局视角
在《支付山河图 卷零——总论》中我们有提到整个支付体系结构如下图所示：
\a  
\a 从上图可以看出，退款作为领域业务，依赖于基础交易平台的基础能力，对更外层的商户提供服务。那么一个典型退款的过程是怎样的呢？过程涉及哪些链路和系统呢？
\a 我们以一个用户请求退款10元，并要求退到银行卡的典型场景为例，简要过程交互如下图所示：
\a  
\a 整体过程描述如下：
\a 1、 首先是用户向商户提出退款请求。
\a 2、 商户确认请求后，向支付机构（香港钱包）提交退款申请。
\a 3、 香港钱包受理退款后，以业务方的身份调用基础交易平台的商户退款集成服务。
\a 4、 商户退款服务在进行必要的校验后，调用记账平台的事务管理器，进行商户B账户到退款平台C账户资金的划转。
\a 5、 资金划转完成后，商户退款服务通过发送CQ（财付通消息组件）消息，告知异步退款系统对该笔退款申请发起银行资金操作。
\a 6、 异步退款系统将根据退款请求，向银行提交资金操作指令，完成物理资金的划转。

从上面的过程描述中我们可以看到，整个退款过程中，有的步骤是可以在系统中立即完成的，如系统内部商户B到平台C的资金划转，我们称之为实时链路；有的步骤需要与外部系统交互，如上面的第6步银行操作，无法立即完成，我们称之为异步链路。

2.4.2 退款实时链路
退款实时链路，指退款过程中可以在系统内部立刻完成的步骤集合，例如基础单据创建、系统资金划转等。在上一节实例图中的具体范围是从“基础交易平台”的商户退款服务被调用，到异步链路受理的全过程。如下图红框部分所示：
\a  
\a “退余额”类型的退款，不需要去银行。在第4步记账时，资金直接从商户B划转到用户C，退款完成。因此可以在实时链路中完成全部操作。
\a “退银行卡”类型的退款，需要先在实时链路中完成从商户B->退款平台C的资金划转，将退款资金独立出来，再去异步链路进行银行操作。
\a 退款实时链路的细节会在第3章中详细描述。

2.4.3 退款异步链路
退款异步链路，负责处理不能在实时链路中完成的退款步骤。这样的场景也有很多，例如用户要求退回银行卡，则需要与银行系统交互，受限于银行能力而无法在实时链路中完成；又例如用户的支付账户注销，无法完成资金划转，则需要转到客服处理，同样无法在实时链路中完成。
\a 异步链路位于下图中的红框部分：
\a  
\a 退款异步链路的细节会在第4章中详细描述。

第3章 退款实时链路
退款实时链路实际上是由基础交易平台的一系列微服务（Middle框架）组成。这些实时服务又可以分为集成服务和原子服务，集成服务通过调用各个原子服务来合作完成复杂的业务功能。

3.1 架构概述

\a 上图简要描述了退款同步链路的主要流程，以典型的商户退款场景为例，具体步骤如下：

商户向香港钱包提交退款申请。
香港钱包作为业务方，调用基础交易平台提供的退款集成服务。
集成服务首先调用一系列原子服务来完成验密、鉴权、查订单、建退款单、锁订单等准备操作。
集成服务调用记账平台的分布式事务管理器来进行账户记账，出款方是商户B账户，入账方是用户C账户（退余额）或退款平台C账户（退卡），这一步完成了系统资金的划转。
针对记账平台事务管理器的反馈结果，更新并解锁订单、退款单。
对于退卡类型的请求，还需要将退款请求分发到异步退库系统，去银行进行物理资金的操作。这里通过准实时异步消息组件CQ来调用异步退款受理服务，服务调用解耦。
注意，记账平台是一个独立的部分，提供通用的记账能力，各个业务都会用到，并不归属于某一特定业务。

3.2 Q&A
3.2.1 为什么要锁单？
实时链路中的锁单，指的是在核心记账平台进行资金划转前，将该笔退款对应的支付单和退款单锁定。这里是通过逻辑锁来进行锁定，即DB库表中设置了锁定字段，通过指定该字段的值来进行锁定和解锁。
\a 锁单的原因是：实时服务都是分布式集群，有很多相同的服务同时对外提供服务。用逻辑锁对支付单和退款单进行锁定，可以避免同一笔订单或退款单被多个退款服务同时处理，避免资金问题。

3.2.2 分布式事务中断问题
在调用记账平台分布式事务管理器进行记账的前后有锁订单和解锁订单的操作，由于存在RPC，所以无法使用数据库事务保证一致性。那么这里是如何保证锁定和解锁的一致性呢？如果记账平台事务操作时机器挂掉了，订单和退款单是否会被永远锁死？
\a 答案是有专门的查询程序去验证事务结果，而且查询程序不止一个。
\a 商户退款服务在处理退款请求时，会在共享内存中记录正在处理的退款单号和当前处理状态。会有另一个程序实时扫描该共享内存，找出未解锁的退款单，去记账平台查询记账操作的结果，更新回退款单表。该程序读取共享内存，无需扫描全部库表，因此时效性非常高。
\a 同时还有程序定时扫描库表，查找锁定状态的单，并向记账平台查询操作结果，更新回订单和退款单表。这种方式需要扫描全部库表，非常耗时，主要针对的是机器挂掉，共享内存丢失的情况。

3.2.3 共享内存的改进方式
在分布式事务的中断处理中，现有程序引入了共享内存来提高结果查询效率，那么有没有更好的处理方式呢？
\a 我们首先说一下共享内存的优缺点，优点是：

内存操作，效率高。
多进程共享。
无需部署额外程序。
缺点是：

受限于单机。共享内存仅在当前机器有效。
断电内容丢失。机器断电后，内存中的内容会全部丢失。
操作复杂。需要自行管理和分配内存。
那么有没有什么替代方式既具有共享内存的优点，又解决了其缺点呢？
\a 在思考过后，我个人认为KV数据库是一个不错的选择。它同样是内存存储，查询效率非常高，而且断电不会丢失，可多进程、多机器使用，操作也非常简单。但需要额外部署和维护KV数据库，不过如果业务非常重要，那么这些代价是值得的。

3.2.4 为什么要引入消息组件CQ？
实时链路与异步链路交易采用的是消息组件CQ，调用方和被调方都是同样的微服务，为什么不直接调用呢？
\a 从架构概述中我们知道，实时链路是直接与业务和用户交互的部分，因此它对时效要求非常高。而异步链路则对时效性要求并不高，所以这里使用消息组件来进行实时链路和异步链路的解耦，避免异步链路服务异常导致实时链路延迟，进而影响用户体验的问题。此外，通过异步组件解耦，也清晰了链路之间的边界，屏蔽了外部系统的细节。

3.3 更深入的细节
退款实时链路还要处理很多更复杂的逻辑，如货币兑换场景、优惠券场景下的退款是如何处理的，具体细节是什么？
\a 这里面的逻辑较为复杂，第一阶段主要目标是缕清整体逻辑，更深入的业务场景第二阶段再来深入。
\a 学习3阶段划分

第4章 退款异步链路
4.1 功能概述
先说做什么，再说怎么做。让我们来看看退款异步链路都要做哪些事情。比较重要的事情如下所示：

4.1.1 与银行交互
与银行交互，将资金退回用户银行卡是异步退款链路最主要的职责。银行属于外部系统，那么与银行交互时我们需要考虑什么问题呢？

银行众多，如何交互？
对于银行的处理结果，如何将其回导到基础交易平台？
与银行交互时，如何确保系统资金与银行资金变动的一致性？
如何确保异步退款系统本身不会漏退、重复退？
银行退款失败时，要如何处理？
\a 这些问题都可以在下文中找到答案。
4.1.2 与人交互
异步链路的另一重要作用，就是与人交互。这里的人，包含客服、财务人员等。
\a 例如用户支付账户注销，导致无法退款，此时就需要客服去联系用户，确认其银行账户。这个过程可能会花费很多时间，因此不能放到实时链路中。
\a 又例如需要退款降级处理时，需要财务人员进行确认方可操作，财务人员确认需要时间，因此该操作也只能放在异步链路中处理。

4.1.3 退款降级
退款降级也是退库异步链路的重要功能之一。因为银行属于外部系统，可能会不可用；用户也有可以突然注销银行卡，导致资金无法退出。在这样的情况下，就需要退款降级，将退银行的单，降级为退到用户余额。

4.2 架构概述
以境外的异步退款系统为例，其主要架构如下图所示：
\a  
\a 异步链路的数据源头是上图最左侧的“基础交易平台”，终点是对接的银行系统。基础交易平台具有业务基础单据，如退款单表、提现单表、转账单表等。这些库表关联的服务就是“基础交易平台”为业务提供的基础能力，如转账、提现等。
\a 其中的商户退款服务和CQ消息队列就是我们在实时链路中看到的异步调用逻辑。下面将详细介绍异步链路中的每一个部分的细节。

4.3 数据同步
4.3.1 功能说明
数据同步程序作用是将基础交易平台中归属于异步链路的退款单拉取过来进行处理。
\a 它实际上扮演的是一个兜底的角色，正常情况下所有的异步退款请求都通过CQ完成异步调用。只有在CQ失败或有遗漏时，该程序才能获取到数据。
\a 数据同步程序在异步链路中所处位置即上下游如下图红框所示：
\a  

4.3.2 实现逻辑（交互图）
数据同步过程中涉及到的程序和库表交互如下图所示：
\a  

同步的主要过程如下所示：
\a 1、 初始化任务表，新建数据同步任务。
\a 2、 从基础交易平台的退款单表中拉取待处理的退款记录（一次只拉取一个表）。
\a 3、 Relay调用数据同步实时受理接口，进行退款受理。
\a 4、 更新当前同步任务的结束状态为：1 – 汇总结束。

（PS：退款单表采用分库分表，10个库，每个库100个表，共1000个表）
\a 注意，数据同步是以表为单位的，当一个表完成了同步后才会进行下一个表的同步。

4.3.3 Q&A
4.3.3.1 拉取退款单的时间范围
对于T+1退款，拉取时间范围是（T- 3）000000~（T-1）235959，范围是3天。
\a 对于T+0退款，拉取时间范围是T000000~T235959，范围是1天。

对于T+1退款，为什么拉取的时间范围是3天，而不是1天呢？
\a 在正常情况下拉3天和拉1天的结果是一样的，这样做只是为了防备万一的延时跨天等问题，其实时间范围定为2天也可以。

4.3.3.2 当某一个表同步失败时，如何处理？
以表为单位建立同步任务，并将同步进度实时更新到任务表中。

一个表同步出现异常，只会打印日志并递增错误数，不会影响后续其他表的同步任务。
退款受理接口支持重入，因此中途失败的任务也可以重试执行，直至该表的所有退款记录受理成功。
4.3.3.3 如何防漏？
有多个措施共同合作，确保同步过程不会出现漏单。

冗余拉取。拉取时间范围从1天拓宽到3天，避免跨天因素带来的漏单影响。
拉取进度实时更新。每受理成功一条退款记录，都会立即更新任务表中的同步条数和同步金额。通过同步条数与查询得到的退款单总条数做对比，相同则表示同步完成，不相同则可继续重入处理。
4.3.3.4 如何防重？
如何确保同步程序不会重复拉取已受理的退款单？措施也是多方面的：

以基础交易平台的退款单号draw_id为总控单表的主键，通过主键唯一的属性来进行防重。
反向打标退款单号。对于受理成功的退款单，会调用基础交易平台的接口进行反向打标，已打标的退款单不会被再次拉取。
4.4 退款受理
4.4.1 功能说明
退款受理服务，是指异步链路接收基础交易平台分发的退款单数据，进行数据验证、渠道分配和调度时间确认后，将其写入退款系统总控单中，为后续的退款处理做准备。当该服务返回成功时，即表示退款系统已经受理该退款事务，会将该笔退款处理成功。
\a 退款受理服务在整体结构中所处位置及上下游如下图所示：
\a  

4.4.2 实现逻辑（交互图）


过程说明如下：
\a 1、服务调用方（如基础交易平台CQ）调用退款实时受理服务。
\a 2、退款受理接口将退款记录转化为退款总控记录，并插入总控表中（总控表在一节介绍）。
\a 3、插入退款总控表的操作日志，便于追溯和留痕。（该步骤与上一步在同一事务中）
\a 4、调用基础交易平台提供的退款单汇总标志更新接口（Relay是财付通自研的请求路由组件，具有容灾和自动切换的能力）。
\a 5、修改退款单的汇总标志为：账务汇总。
\a 6、更新总控单中退款记录的汇总标志为：已汇总到基础交易平台。（俗称“反向打标”）

4.5 退款总控
4.5.1 功能说明
即退款总控单表，所有的（异步）退款单都需要先进入总控单表，然后才能被调度。除了退款单的原始信息（买卖家、金额、单号等）外，总控单还新增了数据来源（商户退款或对账退款）、调度渠道（接口退款、转账退款等）、渠道业务单号等退款处理过程中产生的关键信息。
\a 总控单控制着退款单的整个生命周期，从待调度、调度中、调度完成到退款成功或退款失败。要了解一个退款单当前所处的状态，只需查询其对应的总控单即可。其在整体结构中所处位置及上下游如下图所示：
\a  

4.5.2 实现逻辑
总控单表的组成结果是：退款单原始信息+退款过程信息。

4.5.3 Q&A
4.5.3.1 退款总控的意义是什么？
作为一个统一的控制中心，掌握了退款单的整个生命周期，可避免退款单重复处理，同时也便于渠道退款失败时的降级处理（重试其他渠道）。

4.5.3.2 防重问题
总控单必须坚持的原则是，一条退款单有且仅有一条总控记录。这样做的目的是为了避免同一笔退款单，被调度到不同的渠道进行重复处理，造成短款风险。一种简单有效的做法是：将基础交易平台生成的唯一退款单号作为总控单的主键，利用数据库主键唯一的属性来进行防重。

4.6 总控调度
4.6.1 功能说明
对于退款总控单，目前主要有两种调度类型：接口调度和余额调度，分别对应“接口退款”和“转账退款”两种退款渠道，如下图所示：



调度分发的作用是加载相应退款渠道的总控单，并进行相应的退款处理。例如余额调度对应的退款渠道是“转账退款”，那么调度时就对总控单发起转账。而对于接口退款，则调用提现接口将资金冻结，并插入接口退款明细中，等待其他程序将其发往银行。
\a 其在整体结构中所处位置及上下游如下图所示：
\a  

4.6.2 接口调度
4.6.2.1 功能说明（交互图）
如下图所示，一次完整的接口退款总体上可以分为3部分：
\a 1、 第一部分，1.1~1.4，冻结退款资金，并写入退款明细。
\a 2、 第二部分，2.1~2.3，退款明细通过前置机发往银行，进行银行资金操作。
\a 3、 第三部分，3.1~3.2，银行处理结果回导，成功则扣除资金，失败则解冻资金。
\a  
\a 接口调度主要做的就是第一部分，将总控单对应的资金冻结，并写入退款明细表，等待退款请求程序发往银行。

4.6.3 余额调度
4.6.3.1 功能说明
余额调度的主要功能，是对总控表中的退款渠道为“转账退款”的总控单发起转账，转账出钱方是退款专用的平台C。这种调度方式针对的退款场景是：接口退款失败，降级退余额。

4.6.4 Q&A
4.6.4.1 接口调度中的提现
退款接口调度中的提现与结算中的提现有什么区别？
\a 同样都是调用基础交易平台的提现接口，但提现参数中有很多细节不同。例如提现类型参数固定为“退款”，这种类型的提现单不会被付款侧拉取，会等待退款自己的程序来发往银行。
\a 为什么不复用付款侧到银行的能力呢？因为“退款到银行”和通常的“付款到银行”并不一样，最重要的区别在于：退款要求原路退回，每一笔退款都必须退回支付的银行账户，而付款则没有此要求。
\a PS：此问题涉及到提现和付款，可在阅读过付款卷后再来理解。

4.6.4.2 调度的依据是什么？
总控单的调度渠道字段。

4.6.4.3 为什么需要调度分发？
调度程序是总控单统一的出口，由该程序来处理总控单。

4.6.4.4 渠道“转账退款”的数据来源是什么？
“转账退款”渠道，即调用转账接口，将资金退回到用户的余额。可是退余额的类型，不是在同步系统中处理了吗？为什么异步系统中还有这种渠道存在？
\a “转账退款”渠道的数据来源是已经失败的“接口退款”数据。即，当接口退款失败时，无法走银行渠道，也无法再返回同步系统，此时就只能通过总控单流转退款渠道为“转账退款”，将资金降级退回到用户余额。

4.7 退款渠道
4.7.1 概述
什么是渠道？
\a 退款渠道其实是一个抽象的概念，它通常由多个程序合作构成，并且还伴随着与外部系统的交互。以接口退款渠道为例：
\a  
\a 图中的接口调度程序、退款请求程序、退款回导程序和退款明细表都属于“接口退款渠道”，与其交互的系统有退款总控、提现服务和银行前置机服务等。这些程序和系统共同构成了接口退款渠道。

根据业务场景的不同，退款也分为多种不同的渠道，不同渠道之间是互斥的。一条退款单只能选择一条渠道，只有当该条渠道确认无法处理时，才能由财务转投其他渠道。
\a 目前主要的退款渠道有：
\a 1、 接口退款。
\a 2、 转账退款。
\a 3、 提现退款。（暂未实现）
\a 4、 转客服。（暂未实现）
\a 下面将会详细介绍各个渠道。

4.7.2 接口退款
4.7.2.1 什么是接口退款？
接口退款，即调用银行前置机的接口，将退款请求对应的资金操作发往银行，从银行维度进行实际的资金划转，完成退款。
\a PS：银行前置机组是财付通专门与各大银行对接的小组，他们屏蔽各大银行的差异，向内部业务提供统一的银行操作接口，为业务使用银行能力提供便利。

4.7.2.2 为什么需要接口退款？
对于银行卡支付的交易，要原路退款，则需要和银行系统进行交互，接口退款渠道就是用于处理这种类型的退款。

4.7.2.3 什么时候进行接口退款？
当用户使用银行卡支付，并且申请退款时，该请求就会走异步退款系统的“接口退款”渠道，进行接口退款。

4.7.2.4 怎么进行接口退款？
主要过程是：
\a 1、 调用基础交易平台的提现接口，冻结资金，并写入退款明细表。
\a 2、 将退款明细逐笔发往银行前置机，再到银行进行物理资金的划转。
\a 3、 当银行处理结果返回时，将处理结果从前置机回导至总控单。

具体逻辑在调度分发程序中实现，详情参考3.5.2接口调度章节。

4.7.3 转账退款
4.7.3.1 什么是转账退款？
转账退款，即调用转账接口，将资金退回到用户的余额。

4.7.3.2 为什么需要转账退款？
“转账退款”渠道的数据来源是已经失败的“接口退款”数据。即，当接口退款失败时，无法走银行渠道，也无法再返回同步系统，此时就只能通过总控单流转退款渠道为“转账退款”，将资金降级退回到用户余额。

4.7.3.3 什么时候进行转账退款？
当“接口退款”渠道确认一笔退款单无法成功时，财务人员就会将总控单中该笔退款对应的退款渠道流转为“转账退款”。

4.7.3.4 怎么进行转账退款？
逻辑是：调用基础交易平台的转账接口进行转账。详细过程在调度分发程序中实现，参考3.5.3余额调度章节。

4.8 渠道调度
4.8.1 概述
这里的渠道调度特指接口退款中，将退款明细发送到银行前置机的过程。目前其他渠道（转账退款）由于链路较短，在总控调度过程中即可完成所有功能，因此不需要渠道调度。下文中所说的渠道调度均特指接口退款的渠道调度。
\a 其在整体结构中所处位置及上下游如下图所示：
\a  

4.8.2 功能说明（交互图）
渠道调度的功能概述如下交互图如下所示：
\a  

整个渠道调度过程可以分为3个部分：
\a 1、 第一部分，加载阶段。加载业务配置、前置机配置和待退款数据。
\a 2、 第二部分，请求阶段。首先进行预下单，然后查询POS是否存在，接着请求退款接口。
\a 3、 第三部分，结果更新和上报。将前置机请求结果更新到退款明细表，并将请求失败情况上报Monit监控平台。

4.9 结果回导
4.9.1 渠道回导
\a 4.9.1.1 功能概述（交互图）
\a 什么是渠道回导？
\a 即将前置机去银行付款的结果更新到本系统中，包括退款明细、总控单和提现单。
\a 其在整体结构中所处位置及上下游如下图所示：
\a  
\a 下面是其功能交互图：
\a  
\a 整体过程也可以分为3个阶段：
\a 1、 加载阶段。加载业务配置、前置机配置、加载待确认退款明细数据。
\a 2、 结果查询阶段。向银行前置机查询该笔退款的结果。
\a 3、 生效阶段。对于有明确结果的退款，将其明确结果写回基础交易平台的提现单，进行资金的扣除或解冻。

4.9.2 核心回导
4.9.2.1 功能概述（交互图）
核心回导是指将退款总控单的状态同步回基础交易平台的退款单。只有状态为成功（包括退款成功和调整成功）的记录，才会进行结果回导。
\a 其在整体结构中所处位置及上下游如下图所示：
\a  
\a 下面是其功能交互图：
\a  

4.10 平台C对账
4.10.1 功能概述（交互图）
平台C对账主要做的是退款平台C账号的流水与退款总控单流水的比对，其交互图如下所示：
\a  
\a 首先进行几个名词解释：
\a 1、 账户入流水：基础交易平台在受理退款时，当确认了该笔退款走银行卡退款后，就会进行一笔商户B到退款平台C的转账，先将退款资金转移到退款专用C账户。这里会产生一笔退款平台C的入账流水。
\a 2、 账户出流水：当异步系统退款成功时，会扣除平台C中的相应资金，这里会产生一笔退款平台C的出流水。
\a 3、 总控入流水：当异步退款系统在受理退款时，会在总控流水表中插入一条受理流水。
\a 4、 总控出流水：当异步退款系统处理成功时，会在总控流水表中插入一条退款成功流水，这就是总控出流水。
\a 平台C对账的目的就是确认下面两条等式是否成立：
\a 1、 账户入流水 = 总控入流水。
\a 2、 账户出流水 = 总控出流水。

平台C对账的目的是什么？
\a 只要确保上面2条等式成立，那么就能确定异步退款系统没有漏单、多单和错单。

4.10.2 Q&A
4.10.2.1 对账方式是什么？
两边数据按照退款单号进行排序，并逐个往下对比。遇到差异时则记录差异，单号小的一方跳到下一条记录，继续对比。

4.11 异常中心
4.11.1 功能概述
异常中心是用于处理一些系统无法自动解决的问题，例如某一渠道退款失败，则需要财务在异常中心进行确认，然后决定降级到其他退款渠道。又例如由于用户账户注销导致退余额失败，则同样需要在异常中心进行人工确认，并流转到“客服退款”等其他渠道。

4.11.2 目的
异常中心的目的是处理退款过程中系统无法自动解决的问题。

4.11.3 实现逻辑
异常中心有前端的页面系统和后端的相应接口组成，其整体结构如下所示：
\a  

第5章 退款要点
需要注意的问题有很多，如：
\a 1、 资金安全问题。如何防止错退、漏退、重复退等资金问题。
\a 2、 退款时效问题。如何提升退款的时效性，是T+0退款还是T+1退款问题。
\a 3、 扩展性问题。如何设计便于拓展的架构，以便于快速支持更多的退款渠道。

5.1 退款安全
事前：数据库设计时，总控单以退款单核为主键（防重）。退款受理时进行查单操作。
\a 事中：全流程验证签名（防错）、预下单模式（防重）。
\a 事后：平台C对账可以事后发现错、漏、重等问题。

5.2 链路界限
从上文的介绍中，我们将退款划分为了实时链路和异步链路，但这两者的界限并不是绝对的。异步链路受限于外部系统或人工效率，无法达到实时处理的效果。但如果外部系统能够提供实时能力，例如银行提供实时接口，那么与银行的交互也可以纳入到实时链路中去。
\a 目前大陆的银行都提供了实时处理接口，因此微信支付的银行卡退款可以做到准实时到账。

第6章 结束语
在上文介绍中，我们先介绍了退款的概念、场景和资金流。然后描绘了当前退款系统的全貌，并依据现状将其划分为两个重要链路：实时链路和异步链路。随后分别详细介绍了两条链路的具体实现，通过交互图描述了重要逻辑，通过时序图说明了详细实现细节。同时各个部分的Q&A里提出了一些有趣的问题并给出了个人的理解，同样欢迎大家提出自己的问题，一起探讨。